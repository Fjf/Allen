###############################################################################
# (c) Copyright 2018-2020 CERN for the benefit of the LHCb Collaboration      #
###############################################################################

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - check			# Ensures the CI environment is valid
  - build           # Builds all projects
  - run       		# Runs the tests across architectures
  - test      		# Runs various tests of the software
  - publish   		# Publishes the results of the tests and runs in channels and grafana

variables:
  TARGET_BRANCH: master

check-env:
  stage: check
  except:
    - /.*/@lhcb/Allen
  script:
    - |
      echo "The Allen CI depends on custom GitLab runners and therefore tests"
      echo "running on forks will fail. Please create a branch in the main"
      echo "repository at https://gitlab.cern.ch/lhcb/Allen/"
    - exit 1

check-copyright:
  stage: check
  image: gitlab-registry.cern.ch/ci-tools/ci-worker:cc7
  script:
    - curl -o lb-check-copyright "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/SourceTools.py?inline=false"
    - python lb-check-copyright origin/${TARGET_BRANCH}

check-formatting:
  stage: build
  image: gitlab-registry.cern.ch/lhcb-docker/style-checker
  script:
    - if [ ! -e .clang-format ] ; then
    -   curl -o .clang-format "https://gitlab.cern.ch/lhcb-parallelization/Allen/raw/master/.clang-format?inline=false"
    -   echo '.clang-format' >> .gitignore
    -   git add .gitignore
    - fi
    - curl -o lb-format "https://gitlab.cern.ch/lhcb-core/LbDevTools/raw/master/LbDevTools/SourceTools.py?inline=false"
    - python lb-format --format-patch apply-formatting.patch origin/master
  artifacts:
    paths:
      - apply-formatting.patch
    when: on_failure
    expire_in: 1 week
  allow_failure: true

.build_job: &build_gcc_job_def_warnings_as_errors
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: build
  script:
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - TARGET=${JOB_NAME_SPLIT[0]}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - BUILD_TYPE=${JOB_NAME_SPLIT[2]}
    - ADDITIONAL_OPTIONS="${JOB_NAME_SPLIT[3]}"
    - OVERRIDE_CUDA_ARCH_FLAG="-gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_80,code=sm_80"
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - source /cvmfs/sft.cern.ch/lcg/contrib/cuda/11.0RC/x86_64-centos7/setup.sh
    - mkdir build_${TARGET}
    - cd build_${TARGET}
    - cmake -DSTANDALONE=ON -G Ninja -DTREAT_WARNINGS_AS_ERRORS=ON -DTARGET_DEVICE=${TARGET} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSEQUENCE=${SEQUENCE} -DCPU_ARCH=haswell -DOVERRIDE_CUDA_ARCH_FLAG="${OVERRIDE_CUDA_ARCH_FLAG}" ${ADDITIONAL_OPTIONS} ..
    - ninja -j 4
  artifacts:
    expire_in: 2 hrs
    paths:
      - build*/*Allen*
      - build*/Sequence.json
      - input
  retry: 0
  allow_failure: true

.build_job: &build_clang_job_def_warnings_as_errors
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: build
  script:
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - TARGET=${JOB_NAME_SPLIT[0]}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - BUILD_TYPE=${JOB_NAME_SPLIT[2]}
    - ADDITIONAL_OPTIONS="${JOB_NAME_SPLIT[3]}"
    - OVERRIDE_CUDA_ARCH_FLAG="-gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_80,code=sm_80"
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-clang10-opt
    - source /cvmfs/sft.cern.ch/lcg/contrib/cuda/11.0RC/x86_64-centos7/setup.sh
    - mkdir build_${TARGET}
    - cd build_${TARGET}
    - cmake -DSTANDALONE=ON -G Ninja -DTREAT_WARNINGS_AS_ERRORS=ON -DTARGET_DEVICE=${TARGET} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSEQUENCE=${SEQUENCE} -DCPU_ARCH=haswell -DOVERRIDE_CUDA_ARCH_FLAG="${OVERRIDE_CUDA_ARCH_FLAG}" ${ADDITIONAL_OPTIONS} ..
    - ninja -j 4
  artifacts:
    expire_in: 2 hrs
    paths:
      - build*/*Allen*
      - build*/Sequence.json
      - input
  retry: 0
  allow_failure: true

.build_job: &build_gcc_job_def
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: build
  script:
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - TARGET=${JOB_NAME_SPLIT[0]}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - BUILD_TYPE=${JOB_NAME_SPLIT[2]}
    - ADDITIONAL_OPTIONS="${JOB_NAME_SPLIT[3]}"
    - OVERRIDE_CUDA_ARCH_FLAG="-gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_80,code=sm_80"
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - source /cvmfs/sft.cern.ch/lcg/contrib/cuda/11.0RC/x86_64-centos7/setup.sh
    - mkdir build_${TARGET}
    - cd build_${TARGET}
    - cmake -DSTANDALONE=ON -G Ninja -DTARGET_DEVICE=${TARGET} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSEQUENCE=${SEQUENCE} -DCPU_ARCH=haswell -DOVERRIDE_CUDA_ARCH_FLAG="${OVERRIDE_CUDA_ARCH_FLAG}" ${ADDITIONAL_OPTIONS} ..
    - ninja -j 4
  artifacts:
    expire_in: 2 hrs
    paths:
      - build*/*Allen*
      - build*/Sequence.json
      - input
  retry: 1

.build_job: &build_clang_job_def
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: build
  script:
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - TARGET=${JOB_NAME_SPLIT[0]}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - BUILD_TYPE=${JOB_NAME_SPLIT[2]}
    - ADDITIONAL_OPTIONS="${JOB_NAME_SPLIT[3]}"
    - OVERRIDE_CUDA_ARCH_FLAG="-gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_80,code=sm_80"
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-clang10-opt
    - source /cvmfs/sft.cern.ch/lcg/contrib/cuda/11.0RC/x86_64-centos7/setup.sh
    - mkdir build_${TARGET}
    - cd build_${TARGET}
    - cmake -DSTANDALONE=ON -G Ninja -DTARGET_DEVICE=${TARGET} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSEQUENCE=${SEQUENCE} -DCPU_ARCH=haswell -DOVERRIDE_CUDA_ARCH_FLAG="${OVERRIDE_CUDA_ARCH_FLAG}" ${ADDITIONAL_OPTIONS} ..
    - ninja -j 4
  artifacts:
    expire_in: 2 hrs
    paths:
      - build*/*Allen*
      - build*/Sequence.json
      - input
  retry: 1

docker_image:build:
  stage: build
  only:
    refs:
      - master
  tags:
    - docker-image-build
  script: "echo 'Building Allen dev docker image"
  variables:
    TO: $CI_REGISTRY_IMAGE:latest
    GIT_SUBMODULE_STRATEGY: recursive
  allow_failure: true

.run_physics_efficiency_job: &run_physics_efficiency_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - D_NUMBER=${CI_RUNNER_DESCRIPTION_SPLIT[1]}
    - RUN_OPTIONS="-n 1000 -m 1000"
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir validation_output
    - ln -s validation_output output # Needed by Root build
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} numactl --cpunodebind=0 --membind=0 ./Allen -f /scratch/dcampora/allen_data/201907/bsphiphi_mag_down ${RUN_OPTIONS} 2>&1 | tee ../validation_output/bsphiphi_${DEVICE_ID}.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - validation_output/*
  allow_failure: true
  retry: 1

.run_physics_efficiency_job: &run_physics_efficiency_job_def_cpu
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - NUMA_NODE=${CI_RUNNER_DESCRIPTION_SPLIT[2]}
    - RUN_OPTIONS="-n 1000 -m 1000"
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir validation_output
    - ln -s validation_output output # Needed by Root build
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - numactl --cpunodebind=${NUMA_NODE} --membind=${NUMA_NODE} ./Allen -f /scratch/dcampora/allen_data/201907/bsphiphi_mag_down ${RUN_OPTIONS} 2>&1 | tee ../validation_output/bsphiphi_${DEVICE_ID}.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - validation_output/*
  allow_failure: true
  retry: 1

.run_with_run_changes_job: &run_with_run_changes_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - D_NUMBER=${CI_RUNNER_DESCRIPTION_SPLIT[1]}
    - RUN_OPTIONS="-n 1000 -m 700 --disable-run-changes 0"
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir run_changes_output
    - ln -s run_changes_output output # Needed by Root build
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} ./Allen --mdf /scratch/dcampora/allen_data/201907/mdf/upgrade_mc_minbias_scifi_v5_000.mdf -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS} 2>&1 | tee ../run_changes_output/minbias_${DEVICE_ID}.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - run_changes_output/*
  allow_failure: true
  retry: 1

.run_no_run_changes_job: &run_no_run_changes_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - D_NUMBER=${CI_RUNNER_DESCRIPTION_SPLIT[1]}
    - RUN_OPTIONS="-n 1000 -m 700 --disable-run-changes 1"
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir no_run_changes_output
    - ln -s no_run_changes_output output # Needed by Root build
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} ./Allen --mdf /scratch/dcampora/allen_data/201907/mdf/upgrade_mc_minbias_scifi_v5_000.mdf -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS} 2>&1 | tee ../no_run_changes_output/minbias_${DEVICE_ID}.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - no_run_changes_output/*
  allow_failure: true
  retry: 1

.run_throughput_job_no_profiling: &run_throughput_job_no_profiling_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - D_NUMBER=${CI_RUNNER_DESCRIPTION_SPLIT[1]}
    - D_MEMORY=${DEVICE_MEMORY_MAP[${DEVICE_ID}]}
    - RUN_OPTIONS="-n 500 -m 500 -r 1000 -t 16 -c 0"
    - if [ "${D_MEMORY}" = "LOW" ]; then
    -   RUN_OPTIONS="-n 500 -m 500 -r 1000 -t 8 -c 0"
    - fi
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir output_${DEVICE_ID}
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - echo CUDA_VISIBLE_DEVICES=${D_NUMBER} numactl --cpunodebind=0 --membind=0 ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS}
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} numactl --cpunodebind=0 --membind=0 ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS} 2>&1 | tee ../output_${DEVICE_ID}/output.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - output_*
  allow_failure: true
  retry: 1

.run_throughput_job_no_profiling_cpu: &run_throughput_job_no_profiling_def_cpu
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - TOTAL_THREADS=$(lscpu | egrep "^CPU\(s\):.*[0-9]+$" --color=none | awk '{ print $2; }')
    - TOTAL_NUMA_NODES=$(lscpu | egrep "^NUMA node\(s\):.*[0-9]+$" --color=none | awk '{ print $3; }')
    - NUMA_NODE=${CI_RUNNER_DESCRIPTION_SPLIT[2]}
    - THREADS=$((${TOTAL_THREADS} / ${TOTAL_NUMA_NODES}))
    - RUN_OPTIONS="-n 100 -m 100 -r 200 -t ${THREADS} -c 0"
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir output_${DEVICE_ID}
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - echo numactl --cpunodebind=${NUMA_NODE} --membind=${NUMA_NODE} ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS}
    - numactl --cpunodebind=${NUMA_NODE} --membind=${NUMA_NODE} ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS} 2>&1 | tee ../output_${DEVICE_ID}/output.txt
  artifacts:
    expire_in: 2 hrs
    paths:
      - output_*
  allow_failure: true
  retry: 1

.run_throughput_job: &run_throughput_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: run
  script:
    - TOPLEVEL=${PWD}
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - declare -A DEVICE_MEMORY_MAP=${DEVICE_MEMORY}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=':' read -ra CI_RUNNER_DESCRIPTION_SPLIT <<< "${CI_RUNNER_DESCRIPTION}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - TARGET=${JOB_NAME_SPLIT[1]}
    - SEQUENCE=${JOB_NAME_SPLIT[2]}
    - D_NUMBER=${CI_RUNNER_DESCRIPTION_SPLIT[1]}
    - D_MEMORY=${DEVICE_MEMORY_MAP[${DEVICE_ID}]}
    - RUN_OPTIONS="-n 500 -m 500 -r 1000 -t 16 -c 0"
    - if [ "${D_MEMORY}" = "LOW" ]; then
    -   RUN_OPTIONS="-n 500 -m 500 -r 1000 -t 8 -c 0"
    - fi
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - mkdir output_${DEVICE_ID}
    - cd build_${TARGET}
    - ls
    - export LD_LIBRARY_PATH=${PWD}:$LD_LIBRARY_PATH
    - mkdir tmp
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS} 2>&1 | tee ../output_${DEVICE_ID}/output.txt
    - CUDA_VISIBLE_DEVICES=${D_NUMBER} TMPDIR=tmp numactl --cpunodebind=0 --membind=0 nsys profile ./Allen -f /scratch/dcampora/allen_data/201907/minbias_mag_down ${RUN_OPTIONS}
    - nsys stats --report gpukernsum report1.qdrep -o allen_report
    - python3 ${TOPLEVEL}/checker/plotting/extract_algo_breakdown.py -f allen_report_gpukernsum.csv -d ../output_${DEVICE_ID}
    - rm -rf report1.qdrep tmp
  artifacts:
    expire_in: 2 hrs
    paths:
      - output_*
  allow_failure: true
  retry: 1

.throughput_cli_plot_job: &publish_algo_breakdown_plot_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: publish
  script:
    - declare -A DEVICE_NUMBERS_MAP=${DEVICE_NUMBERS}
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - DEVICE_ID=${JOB_NAME_SPLIT[0]}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - export PATH=$PATH:/usr/local/cuda/bin
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - python3 checker/plotting/csv_plotter.py -t "Algorithm Breakdown of sequence ${SEQUENCE}, branch ${CI_COMMIT_REF_NAME}" -u "%" -x 30 -m ${MATTERMOST_KEY} output_${DEVICE_ID}/algo_breakdown.csv

test_physics_efficiency:
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: test
  script:
    - TOPLEVEL=${PWD}
    - ls validation_output
    - ls ${TOPLEVEL}/test/reference
    - cd validation_output
    - for i in $( ls ); do echo "Checking ${i}"; tail -n97 ${i} | head -n94 > efficiency_${i}; diff -u ${TOPLEVEL}/test/reference/${i} efficiency_${i} | tee ${i}_diff || true; done
    - cat *_diff > alldiffs
    - if [ -s alldiffs ]; then echo "Differences were found against reference files."; exit 1; else echo "No differences found against reference files."; exit 0; fi
  dependencies:
    - geforcertx2080ti:CUDA:hlt1_pp_default:run_physics_efficiency
    - x862630v4:CPU:hlt1_pp_default:run_physics_efficiency
  tags:
    - cvmfs
  allow_failure: true

test_run_changes:
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: test
  script:
    - TOPLEVEL=${PWD}
    - ls run_changes_output
    - ls no_run_changes_output
    - cd run_changes_output
    - for i in $( ls ); do echo "Checking ${i}"; tail -n98 ${i} | head -n94 > run_changes_${i}; tail -n98 ${TOPLEVEL}/no_run_changes_output/${i} | head -n94 > no_run_changes_${i}; diff -u no_run_changes_${i} run_changes_${i} | tee ${i}_diff || true; done
    - cat *_diff > alldiffs
    - if [ -s alldiffs ]; then echo "Differences were found against output without run change splitting."; exit 1; else echo "No differences found against output without run change splitting."; exit 0; fi
  dependencies:
    - geforcertx2080ti:CUDA:hlt1_pp_default:run_with_run_changes
    - geforcertx2080ti:CUDA:hlt1_pp_default:run_no_run_changes
    - x862630v4:CPU:hlt1_pp_default:run_with_run_changes
    - x862630v4:CPU:hlt1_pp_default:run_no_run_changes
  tags:
    - cvmfs
  allow_failure: true

# run_built_tests:
#   only:
#     refs:
#       - master
#       - schedules
#       - web
#       - merge_requests
#   stage: test
#   script:
#     - cd build_CUDA
#     - ctest -V
#   dependencies:
#     - CUDA:hlt1_pp_default:Debug::build
#   allow_failure: true

.publish_throughput_job: &publish_throughput_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: publish
  script:
    - PREVIOUS_IFS=${IFS}
    - IFS=':' read -ra JOB_NAME_SPLIT <<< "${CI_JOB_NAME}"
    - IFS=${PREVIOUS_IFS}
    - SEQUENCE=${JOB_NAME_SPLIT[1]}
    - BREAKDOWN_DEVICE_ID=${JOB_NAME_SPLIT[2]}
    - cat output_*/output.txt | grep --color=none "select device" | sed 's/.*:\ [0-9]*\,\ //' > devices.txt
    - cat output_*/output.txt | grep --color=none "events/s" | awk '{ print $1; }' > throughputs.txt
    - cat devices.txt
    - cat throughputs.txt
    - paste -d, devices.txt throughputs.txt > devices_throughputs.csv
    - cat devices_throughputs.csv
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - python3 checker/plotting/post_combined_message.py -l "Throughput of [sequence ${SEQUENCE}, branch ${CI_COMMIT_REF_NAME}](https://gitlab.cern.ch/lhcb/Allen/pipelines/${CI_PIPELINE_ID})" -m ${MATTERMOST_KEY} -t devices_throughputs.csv -b output_${BREAKDOWN_DEVICE_ID}/algo_breakdown.csv
    - python3 checker/plotting/post_telegraf.py -d . -s ${SEQUENCE} -b ${CI_COMMIT_REF_NAME}

.throughput_speedup_job: &publish_speedup_job_def
  only:
    refs:
      - master
      - schedules
      - web
      - merge_requests
  stage: publish
  script:
    - cat output_*/output.txt | grep --color=none "select device" | sed 's/.*:\ [0-9]*\,\ //' > devices.txt
    - cat output_*/output.txt | grep --color=none "events/s" | awk '{ print $1; }' > throughputs.txt
    - cat devices.txt
    - cat throughputs.txt
    - paste -d, devices.txt throughputs.txt > devices_throughputs.csv
    - cat devices_throughputs.csv
    - source /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_98python3 x86_64-centos7-gcc9-opt
    - python3 checker/plotting/csv_plotter.py -n -t "Speedup across GPUs, branch _${CI_COMMIT_REF_NAME}_" -u "x" -x 30 -m ${MATTERMOST_KEY} devices_throughputs.csv

# =====
# Build
# =====

CUDA:hlt1_pp_default:RelWithDebInfo::build:
  <<: *build_clang_job_def
  tags:
    - cvmfs

CUDA:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build:
  <<: *build_clang_job_def
  tags:
    - cvmfs

CPU:hlt1_pp_default:RelWithDebInfo::build:
  <<: *build_clang_job_def
  tags:
    - cvmfs

CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build:
  <<: *build_clang_job_def
  tags:
    - cvmfs

# Builds with warnings treated as errors
# gcc:

CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build_warnings_as_errors:
  <<: *build_gcc_job_def_warnings_as_errors
  tags:
    - cvmfs

CUDA:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build_warnings_as_errors:
  <<: *build_gcc_job_def_warnings_as_errors
  tags:
    - cvmfs

# clang:

CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build_warnings_as_errors:
  <<: *build_clang_job_def_warnings_as_errors
  tags:
    - cvmfs

CUDA:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build_warnings_as_errors:
  <<: *build_clang_job_def_warnings_as_errors
  tags:
    - cvmfs

# Build of default sequence without code generation

CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON -DSEQUENCE_GENERATION=OFF:build:
  <<: *build_clang_job_def
  tags:
    - cvmfs

# Builds only on master of additional options

CUDA:hlt1_pp_no_gec:RelWithDebInfo::build:
  <<: *build_clang_job_def
  tags:
    - cvmfs
  only:
    refs:
      - master

CPU:hlt1_pp_no_gec:RelWithDebInfo::build:
  <<: *build_clang_job_def
  tags:
    - cvmfs
  only:
    refs:
      - master

# ===
# Run
# ===

# Throughput runs

geforcertx2080ti:CUDA:hlt1_pp_default:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - geforcertx2080ti
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

quadrortx6000:CUDA:hlt1_pp_default:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - quadrortx6000
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

teslav100:CUDA:hlt1_pp_default:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - teslav100
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

geforcertx3080:CUDA:hlt1_pp_default:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - geforcertx3080
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

geforcertx3090:CUDA:hlt1_pp_default:run_throughput:
  <<: *run_throughput_job_def
  tags:
    - geforcertx3090
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

x862630v4:CPU:hlt1_pp_default:run_throughput_cpu:
  <<: *run_throughput_job_no_profiling_def_cpu
  tags:
    - x862630v4
  dependencies:
    - CPU:hlt1_pp_default:RelWithDebInfo::build

epyc7502:CPU:hlt1_pp_default:run_throughput_cpu:
  <<: *run_throughput_job_no_profiling_def_cpu
  tags:
    - epyc7502
  dependencies:
    - CPU:hlt1_pp_default:RelWithDebInfo::build

# Physics efficiency runs

geforcertx2080ti:CUDA:hlt1_pp_default:run_physics_efficiency:
  <<: *run_physics_efficiency_job_def
  tags:
    - geforcertx2080ti
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

x862630v4:CPU:hlt1_pp_default:run_physics_efficiency:
  <<: *run_physics_efficiency_job_def_cpu
  tags:
    - x862630v4
  dependencies:
    - CPU:hlt1_pp_default:RelWithDebInfo::build

# Test runs

# geforcertx2080ti:CUDA:hlt1_pp_default:run_physics_efficiency_debug:
#   <<: *run_physics_efficiency_job_def
#   tags:
#     - geforcertx2080ti
#   dependencies:
#     - CUDA:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build

# x86:CPU:hlt1_pp_default:run_physics_efficiency_debug:
#   <<: *run_physics_efficiency_job_def_cpu
#   tags:
#     - x86
#   dependencies:
#     - CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build

# x86:CPU:hlt1_pp_default:run_physics_efficiency_debug_root:
#   <<: *run_physics_efficiency_job_def_cpu
#   tags:
#     - x86
#   dependencies:
#     - CPU:hlt1_pp_default:Debug:-DUSE_ROOT=ON -DBUILD_TESTS=ON:build

# Additional throughput runs, only on master

geforcertx2080ti:CUDA:hlt1_pp_no_gec:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - geforcertx2080ti
  dependencies:
    - CUDA:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

quadrortx6000:CUDA:hlt1_pp_no_gec:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - quadrortx6000
  dependencies:
    - CUDA:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

teslav100:CUDA:hlt1_pp_no_gec:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - teslav100
  dependencies:
    - CUDA:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

geforcertx3080:CUDA:hlt1_pp_no_gec:run_throughput:
  <<: *run_throughput_job_no_profiling_def
  tags:
    - geforcertx3080
  dependencies:
    - CUDA:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

geforcertx3090:CUDA:hlt1_pp_no_gec:run_throughput:
  <<: *run_throughput_job_def
  tags:
    - geforcertx3090
  dependencies:
    - CUDA:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

x862630v4:CPU:hlt1_pp_no_gec:run_throughput_cpu:
  <<: *run_throughput_job_no_profiling_def_cpu
  tags:
    - x862630v4
  dependencies:
    - CPU:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

epyc7502:CPU:hlt1_pp_no_gec:run_throughput_cpu:
  <<: *run_throughput_job_no_profiling_def_cpu
  tags:
    - epyc7502
  dependencies:
    - CPU:hlt1_pp_no_gec:RelWithDebInfo::build
  only:
    refs:
      - master

# check run changes

geforcertx2080ti:CUDA:hlt1_pp_default:run_with_run_changes:
  <<: *run_with_run_changes_job_def
  tags:
    - geforcertx2080ti
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

x862630v4:CPU:hlt1_pp_default:run_with_run_changes:
  <<: *run_with_run_changes_job_def
  tags:
    - x862630v4
  dependencies:
    - CPU:hlt1_pp_default:RelWithDebInfo::build

geforcertx2080ti:CUDA:hlt1_pp_default:run_no_run_changes:
  <<: *run_no_run_changes_job_def
  tags:
    - geforcertx2080ti
  dependencies:
    - CUDA:hlt1_pp_default:RelWithDebInfo::build

x862630v4:CPU:hlt1_pp_default:run_no_run_changes:
  <<: *run_no_run_changes_job_def
  tags:
    - x862630v4
  dependencies:
    - CPU:hlt1_pp_default:RelWithDebInfo::build

# =======
# Publish
# =======

throughput:hlt1_pp_default:geforcertx3090:publish_throughput:
  <<: *publish_throughput_job_def
  tags:
    - cvmfs
  dependencies:
    - geforcertx2080ti:CUDA:hlt1_pp_default:run_throughput
    - quadrortx6000:CUDA:hlt1_pp_default:run_throughput
    - teslav100:CUDA:hlt1_pp_default:run_throughput
    - geforcertx3080:CUDA:hlt1_pp_default:run_throughput
    - geforcertx3090:CUDA:hlt1_pp_default:run_throughput
    - x862630v4:CPU:hlt1_pp_default:run_throughput_cpu
    - epyc7502:CPU:hlt1_pp_default:run_throughput_cpu

# Publish additional throughput tests, only in master

throughput:hlt1_pp_no_gec:geforcertx3090:publish_throughput:
  <<: *publish_throughput_job_def
  tags:
    - x86
  dependencies:
    - geforcertx2080ti:CUDA:hlt1_pp_no_gec:run_throughput
    - quadrortx6000:CUDA:hlt1_pp_no_gec:run_throughput
    - teslav100:CUDA:hlt1_pp_no_gec:run_throughput
    - geforcertx3080:CUDA:hlt1_pp_no_gec:run_throughput
    - geforcertx3090:CUDA:hlt1_pp_no_gec:run_throughput
    - x862630v4:CPU:hlt1_pp_no_gec:run_throughput_cpu
    - epyc7502:CPU:hlt1_pp_no_gec:run_throughput_cpu
  only:
    refs:
      - master
