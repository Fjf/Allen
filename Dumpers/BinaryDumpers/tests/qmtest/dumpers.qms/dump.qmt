<?xml version="1.0" ?><!DOCTYPE extension  PUBLIC '-//QM/2.3/Extension//EN'  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<!--
    (c) Copyright 2020 CERN for the benefit of the LHCb Collaboration
-->
<!--
#######################################################
# SUMMARY OF THIS TEST
# ...................
# Author: Roel Aaij
# Purpose: Verify that raw banks are dumped
#######################################################
-->
<extension class="GaudiTest.GaudiExeTest" kind="test">
  <argument name="program"><text>gaudirun.py</text></argument>
  <argument name="args"><set>
    <text>../../options/dump.py</text>
    <text>../options/upgrade-minbias-testfiledb.py</text>
    <text>../options/test_geometry.py</text>
  </set></argument>
  <argument name="use_temp_dir"><enumeral>true</enumeral></argument>
  <argument name="timeout"><integer>600</integer></argument>
  <argument name="validator"><text>
import os
test_name = "dumpers.dump"

ref_sizes = {}
with open(os.path.expandvars('$BINARYDUMPERSROOT/tests/refs/dump.ref')) as ref:
    for line in ref:
        f, s = line.strip().split()
        ref_sizes[f] = int(s)

missing = []
bad_size = []
for f, s in ref_sizes.items():
    if not os.path.exists(f):
        missing.append(f)
    else:
        size = os.stat(f).st_size
        if size != s:
            bad_size.append((f, size, s))

result_str = ''
if not missing and not bad_size:
    result_str += 'Files and sizes match\n'
if missing:
    causes.append("missing files")
    result_str += 'Missing:\n\t' + '\n\t'.join(missing) + '\n'
if bad_size:
    pat = "%s is %d bytes instead of %d"
    causes.append("file size mismatch(es)")
    result_str += ('Wrong size:\n\t'
                   + '\n\t'.join([pat % e for e in bad_size]) + '\n')

result["validator.output"] = result.Quote(result_str)

countErrorLines({"FATAL":0,"ERROR":0,"WARNING":0})

</text></argument>
</extension>
